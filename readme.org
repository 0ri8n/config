#+title:  functional and efficiency focused computing workflow
#+author: emil lenz
#+email:  emillenz@protonmail.com
#+date:   2023-05-16

#+begin_quote
Tech Geeker: (noun) A programmer nerd who are ignorant of social sciences yet persistently loud of his opinions on many social issues related to programming, such as language popularity, pros and cons of GUI, software engineering practices, software license issues, IT industry practices, ethics of corporations.
--- Xahlee

It may looks ridiculous to the outside observer, but efficiency it’s about eliminating that invisible barrier between you and the tool that you’re using,”
--- Ethan Schonoover
#+end_quote

* philosophy
- i am of the strong opinion that you should minimize things you do repeatedly.  thus when closing the terminal by accident => can be restored instead of redoing everything.  launching emacs on every startup? => just run the daemon in the background => always accessible & no waiting time.
- this config aims at making the workflow the most effective, while being as bare metal and lightweight as possible, avoiding bloat and focusing on speed and amount of computational steps.  (no headaches, no unexpected behavior, minimal mental overhead).
- this system is 100% centered at keyboard usage and aims to unify all navigational commands across the terminal, editor, webbrowser, window manager and other possible applications using vim-bindings in combination with a custom global navigation keybinding-scheme which is used & consistent cross-application.  (bindings should be minimalistic and lightweight, because light goes fast and far)
- using the mouse for non creative, non graphical usages is inefficient and creates mental overhead.  having to take the focus off the project just in order to click some ui takes way more mental capacity and computational steps than neccessary and can be negated by using the keyboard and having the same actions always on the same keys.
- this system is designed to be a workstation.  it is the opposite of a beautiful gui experience that aims to be visually pleasing.
  - no effects (transparency etc), no fancy animations, no window decorations / logos.
  - uses colorcoding whenever possible since this enhances readability.
  - no icons :: fancy visual sugar.  keep it simple, minimalist and extensible (they are only a distraction), instead use colorcoding and font faces for visually separating displayed options.  we care about the functionality of a program, and not what cool logo it has.
  - this system puts emphasis on a text & data driven evironment wherever possible this will reduce complexity and increase extensibility and interchangeablilty.  you will also benefit from a more unified and consistent interface across applications.
- consistency :: this config aims to be globally consistent in its design, behaviour and control.
  - which means things like (colorscheme, font, workflow, keybindings, ui..) were once carefully analyzed, choosen and designed and then implemented as consistent as possible across tools (terminal, editor, webbrowser, wm, reader..)
- single focused window :: avoid using splits in your programs and prefer the maximized buffer tabs-only workflow.  (hence we don't include split management bindings in the wm)  i have found it less intrusive and faster to just switch to the tab instead.
  - humans are not designed and not good at multitasking, they excel at linear singular focus processing.
  - splits are mostly useless and take up screenspace, cluttering it with information you are not processing, and that will distract your focus.
  - when you need the buffer/file, it is better to pull it into focus instantly and from muscle memory, instead of letting it occupy your working area.  (it is there when needed instantly but otherwise hidden)
  - enforcing this causes less overhead and more consistency.
  - get rid of the large set of now redundant maps for split management.
- using finders :: completion menus, bookmarks (bindings to hotswitch) and fuzzy finding are exponentially more efficient than navigating and selecting the destinations manually (through something as a gui filemanager)
  - filemanager's have their place only if the file is in proximity / you need an overview.
- ui :: think of the ui as a  hud
  - remove all distractions and think critically if this feature is implemented just because it is possible/showoff/"cool" or because it is a detrimental part of the workflow that enhances the ergongomics/efficiency/possibilities/workflow of the tool.
  - prompts & statusbars on bottom (if neccessary?)
  - completion-menu's / promts are an extensions of the statusbar
    - do not block view
    - consistently on the same spot across all apps (terminal, emacs, dmenu)
    - they should not distract => use flat mode (dmenu style)
  - use thin/lightweight/sharp over thick/heavy/rounded (box drawings / terminal characters / symbols)
    - 1px lines, borders with hard corners & sharp edges have their own beautiful, highly functional aestetic.
    - thin and sharp will create less obstruction (having more complex and voluminous symbols/ui than actually neccessary for visual distinction is bloat and visual sugar)
    - minimal and thin feels more soulless and is more ergonomic with screenspace
  - prompts :: using ~>~ globally (shell, dmenu,..) for prompt indicator symbol
- thinking fast & slow :: rely on fast, instinctive thinking for non repeating tasks and for repeating patterns / actions on the slow, precise, analytical thinking.
  - this is the definition of dry, or not repeating yourself / taking the minimal required no.  of actions to get to the disired output/position.
  - ex: use vims search replace with patterns instead of manually going through and changing each instance
  - ex: relative line jumping over spamming =j=
  - ex: tab switching => thinking fast & instinctive, develop muscle memory (when there are too many => use analytical brain by searching through the list)

** The mouse
#+begin_quote
My preference for emacs boils down to the fact that it doesn't force me to use a mouse.  A mouse is a pseudoanalog device that suffers from all the control-theory anomalies like overshoot and oscillation, plus lack of haptic confirmation.  Using the mouse forces my hands off the home row, forces my eyes off my cursor (to the target of a gesture).  The mouse and all its control-theory ephemera are a source of sheer agony.  They cause me to hate my computer and to tire quickly from any use of it.  Emacs, however, lets me focus my mind, keep my hands in an efficient pose, lets me look at my work, gives me digital feedback (press a physical keyboard button, see a result, no overshoot and oscillation) and enables longer hours in a state of pleasant flow.

It's not Emacs specifically, but any computer tool that helps me avoid mousing.  Along with mousing goes all those proprietary binary formats for documents: anything but ASCII (or, begrudgingly, UTF-8) must be banned.  Long-live Emacs, org-mode, org-table, org-babel, LaTeX, git, and everything that can be represented in plain text.

There is a special ring in Dante's inferno for the inventor of the mouse and for the legions of GUI designers that built all the World's software around it.
--- anonymous
#+end_quote

* modus-theme
[[https://protesilaos.com/emacs/modus-themes][modus-themes info]]
[[https://protesilaos.com/codelog/2023-01-06-re-modus-questions-disability/][modus-themes legibility theory]]
the purpose of a theme is to optimise the presentation of any given interface.
i find that light themes are superior to dark themes.   studies & research have found the following advantages of using a light-theme over a dark-theme ::
- significantly better proofreading (catch more errors in code, misread less)
- high legibility at low brightness / in direct sunlight => less eyestrain, more efficient battery usage
- no astigmatism (bloom of the letter's which causes them to appear blurry & strains the eyes)
for modus themes, #ffffff and #000000 as the base are minimalist colors are the least limiting on the range of different colors that can be use while maintaining stark contrast.
you should never use the computer with no ambient light sources in the room anyways (for concentration) but the display brightness must be adjusted align with the ambient brightness.   thus in dim light (night), an additional source of light other than that of the monitor are required to reduce eye strain.   the eyes are more relaxed (strain less) when they do not have to focus on one point to gather light.  light theme legibility during day is vastly better than dark theme.
one may object that dark themes "look cooler", which we can ignore, since we use our computer's as a productive tool and not to impress anyone over the internet.

* font: iosevka comfy
 it is incredibly compact in width to allow a lot of code on screen, especially when viewing content side by side.
 designed for writing code, using in terminals, and preparing technical documents.
  - the intent is to make everything feel part of the same aesthetic, hence setting the font system-wide.
 it was specifically designed for long terminal / editor sessions (8- hours).  it aims to reduce eye strain and help readability in the long term.  (try a light theme with a bitmap font like terminus for 8 hours.  it will be a tormenting experience! to maximamise the difficulty, do it in a dark room with the monitor’s brightness set to its maximum value.)
 keep the fontsize as small as you can manage while the font is not blurry (for 1920x1080 that corresponds to size: 10).
  - working with big fontsizes, encourages bad eyesight and neckposture.
  - makes you faster
  - less disorientatation in the buffers
  - less context switching
 it is lean, thin and sharp.  this allows it to be used in all context and interfaces.
 economical use of screen space and clarity/legibility at small sizes.
#+begin_quote
Iosevka Comfy optimises for inter-glyph and inter-style consistency within the overarching constraint of usability at small point sizes.  The shapes are round and are designed in concert to both impose a predictable rhythm and keep characters distinct from each other.  Distinctions are drawn on the premise of contributing to the demands of the design in light of usability, without ever calling attention to themselves (as opposed to sporadic calligraphic glyphs amid an otherwise austere presentation which seem to say "look how pretty I am!").
 --- protesilaos stavrou
#+end_quote

* dependencies
- all packages & other commands found under: [[file:setup.org][setup]].

* software
the aim is to be able to run software for years without it breaking or bugging.
learning a tool is an investment and you wouldn't want to sink your time into soemthing that will be useless in a short time.
this is why secure and fast languages such as rust and go are preferred over inconsistent and hacky languages such as perl or python, that require constant maintaining.
i'm very opinionated and have high standards regarding design process and the philosophy behind the tools focused on, hence the selection undergoes a rigorous coparison and selection process.

** webbrowser: firefox
*** install & configure extensions manually
- password manager
- theming (light)
- font set all font choices to the system wide font: iosevka comfy 10 and set: don't allow webpages to custom fonts.  that way it will always look uniform.

*** useage
- pin tabs that you want to assign to fixed hotkeys ([[kbd:][M-<number>]]), such as [[https://chatgpt.com]] or [[https://spotify.com]].  they will automatically open and you cant't accidentally close them with [[kbd:][C-w]].
- bookmarks: name them hierarchically w keywords (syntax like ~org-mode-tags~), ex: ~cs:math:exercises~
  - quickly open website using bookmark searching
  - structured, easy to patternmatch (not having to put them into folders)
- use ~*^%~ in the searchbar for finding tabs, bookmarks & history
- make use of google search operators (~site:~, quoting, ~-~)
- use inbuilt shortcuts...

* hardware
** single monitor only
:PROPERTIES:
:created: [2024-05-21 Tue 11:38]
:END:
- don't use multiple monitors, instead just get used to the efficient & fast navigation- to navigate within virtual workspaces (using a window manager) which is faster (than physically reorienting your FOV) more extensible (have as many as you need), and more consistent (always available, even when on laptop).  additionally this navigational scheme can then be configured within applications, making your workflow there consistent and fast.
- managing windows over multiple monitors becomes increasingly complex and produces overhead.  it's faster to switch to the window you need instantaneously with a keyboard shortcut, instead of physically tilting the head (which is also unergonomic).  additionally we want consistency in the workflow inbetween using the laptop and desktop setup (if you even have that).
- using a single monitor only not only makes you faster, but it also aligns with the focused singletasking fullscreen workflow.

* keybindings
** general notes
- [[kbd:][<ctrl>, <esc>]] :: mapped to [[kbd:][<capslock>]] this greatly increases ergonomics and speed for all ctrl-bindings (even though we don't use emacs, vim still makes use of them all the time too (and other apps like the shell also)).  hold down for [[kbd:][<ctrl>]], single press for [[kbd:][<esc>]].
  - when bill-joy orignially developed VI, the terminal's keyboard, had [[kbd:][<esc>]] on todays [[kbd:][<tab>]] and [[kbd:][<ctrl>]] on [[kbd:][<caps>.]]  this is where [[kbd:][<ctrl>]] should have always stayed at.
- deleting characters :: make using [[kbd:][<c-{h, w, u}>]] instead of [[kbd:][<backspace>]] a habit.  it is more ergonomic and faster than using the incredibly unergonomic and hard to reach [[kbd:][<backspace>.]]  hence we implement these bindings in all apps.
- no vim layer :: we purposefully do not implement a vim-navigation layer globally, since if you are doing more than just typing something into a prompt, you should just use ~emacs-everywhere~ instead.  the implemented keybinds are consistent with vim's insert state and provide the most useful deletion commands when typing into a prompt.
- no homerowmods / layers :: they greatly increase the complexity of the keybinding layer's and introduce unneccessary mental overhead.  additionally and most importantly they cause a delay in typing the actual character which is absolutely inacceptable.  (slow's you down, bottlenecking your typing speed)
  - this config is kept simple, fast and overheadfree (no double functionality: hold down and single-press)
- typing technique :: get into the habit of proper technique in touch typing.  staying on the homerow, typing with little pressure as needed and not using excess force.  this includes touchtyping all numberrow symbols, brackets & braces.  to enforce this, spraypaint the keycaps blank in order to force you to never look at the keyboard again.  force yourself to use the right finger for the right key (right side symbols :: all with the pinky)
- ctrl-map :: bindings found on this layer are related to navigation (~switch-to-buffer~, ~find-file~, ~jump-backwards~, etc..)
- key-repetition :: disable it.  it empowers bad habits of you holding down a key instead of moving intelligently and fast using the appropriate motion (not holding down [[kbd:][j, k]] instead using [[kbd:][<c-{u, d}>]]  not spamming delete, instead using [[kbd:][d-<motion>]]

** navigational standard
| mod+key | action                   | consistency                                              |
|---------+--------------------------+----------------------------------------------------------|
| [[kbd:][b]]       | buffer/window, prompt    | vim: :b <name>                                           |
| [[kbd:][q]]       | [q]uit (buffer/window)   | vim: :q                                                  |
| [[kbd:][f]]       | [f]ind-file (fuzzy)      | commmand line: find, emacs: find-file                    |
| [[kbd:][<tab>]]   | alterate buffer/tab      | standard convention (apps & other oss)                   |
| [[kbd:][1-4]]     | switch to buffer/tab 1-4 | emacs (harpoon) / tmux (windows) / browser (pinned tabs) |
| [[kbd:][<space>]] | leader-key               | vim                                                      |

- condenses down a minimal set of universal, efficient navigational commands, which are found in basically all applications (editor, browser, terminal,..).  they will suffice 90% of all your navigational needs.
  - [[kbd:][<ctrl>]] :: inside applications since it is the defacto standard & aligns with vim's navigational-ctrl-layer-keybind (and is now ergonomically bound).
- inter program keyboard shortcuts consistency is important because they make the keys easier to remember and you will not have to learn multiple paradigms of keymaps.  the here defined set of keybindings are shared across applications (webbrowser, emacs, terminal, etc)
- windowmanager :: the set of program-names during runtime is known and consistent (unlike tabs in applications, where we cannot make presumtions about the contents of the tabs, hence we use numbers), we use specific-chars for switching to the tabs.

***  workflow
when you need to navigate to a different file/tab, this should be your order of modus-operandi ::
1. alternate buffer :: when you are alternating between 2 files/tabs or need to just goto back to the last visited buffer.  this takes the least amount of overhead and is the fastest.
2. hotswitch tab [[kbd:][1-4]] :: use each of them for a file/tmux window/page within the project you are working on (ex: tmux: [1]repl, [2] compilation, [3] manpages, emacs: [1] main.c, [2] srcfile.c, [3] makefile).  you can then navigate between these files instantly without mental overhead.  we purposefully do not allow more than 4 tabs, since that is usually all that is neede within a project.  we want to ensure that it really is frequently visited files and thus keep the overhead low.  avoid manual tab creation if possible => auto-create a tab if it doesn't exist upon focusing it.  we never want visual indication for tabs.   instead switching to other buffer's should be muscle memory => eliminate bad habit and mental overhead of looking at tab-bar to find the tab you want, and instead hotkey to the file instantly.  no tablines, no statusbars.
3. find buffer/tab :: search through the list of open buffers/tabs to switch to the one you need.

* principles
** keep your workflow dry
when you find yourself doing the same things repetitively or you get annoyed it is time to find a program / plugin / script for that step to facilitate the workflow.  (if there is none => write your own script (eg.  killprocess script).

** review the worflow
- review the tool's and workflow you are using from time to time (see if you're missing out and can use something better).
- disable parts of the configuration and evaluate wether it is neccessary or has become obsolete/bloat.

** save state & progress
- ex: do not shut down the computer.  instead: hibernate // shuts it down, but preserves the working state & restores it => resume where left off
- have undo - redo in software: use terminal sessionizers (tmux) => when accidentally closing terminal => reattach to the session, to restore

** the mit-approach
- simplicity :: the design must be simple, both in implementation and interface.  it is more important for the interface to be simple than the implementation.
- correctness :: the design must be correct in all observable aspects.  incorrectness is simply not allowed.
- consistency :: the design must be consistent.  a design is allowed to be slightly less simple and less complete to avoid inconsistency.  consistency is as important as correctness.
- completeness :: the design must cover as many important situations as is practical.  all reasonably expected cases must be covered.  simplicity is not allowed to overly reduce completeness.

#+begin_quote
When i write software, i write and think of it mostly in the timespan of decades, not shortterm.  Hence valuing languages like C, which will still compile, even in a decade from now.
--- alexey kutepov (tsoding)
#+end_quote
This same principle is applied to plain text computing.
