#!/usr/bin/env bb

;; ---
;; title:  bluetooth device menu
;; author: emil lenz
;; email:  emillenz@protonmail.com
;; date:   [2024-12-07] <- (initial ruby version: [2024-05-26]
;; info:
;; - intended for use with a WM.
;; - any provided arguments are directly passed on to dmenu (use dmenu's flags to customize the prompt/theme)
;; dependecies:
;; - dunst
;; - bluetoothctl
;; - dmenu
;; ---

(require '[babashka.process :refer [shell process check]])
(require '[clojure.string :as str])

(def addresses=>devices
  (->> (shell {:out :string} "bluetoothctl devices")
       check
       :out
       str/split-lines
       (map (fn [line]
              (let [[dev addr name]
                    (str/split line #"\s" 3)]
                [name addr])))
       (into {})))

(def off-cmd "/off")

(def device-selected
  (->> (apply shell
              {:in (->> (conj (keys addresses=>devices) off-cmd)
                        (str/join "\n"))
               :out :string}
              "dmenu"
              "-p" "bluetooth-device >"
              *command-line-args*)
       check
       :out
       str/trim))

(defn connect []
  (shell "bluetoothctl" "power" "on")
  (try (do
         (shell "dunstify" "bluetooth: connecting" device-selected)
         (->> (shell "bluetoothctl" "connect" (get addresses=>devices device-selected))
              check)
         (shell "dunstify" "bluetooth: connected" device-selected))
       (catch Exception e
         (shell "dunstify" "bluetooth" (format "[error] failed to connect to device: %s" device-selected)))))

(defn off []
  (->> (shell "bluetoothctl" "power" "off")
       check)
  (shell "dunstify" "bluetooth: off"))

(defn main []
  (if (= device-selected off-cmd)
    (off)
    (connect)))

(main)
