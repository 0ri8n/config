#+title:  i3 literate configuration file
#+author: emil lenz
#+email:  emillenz@protonmail.com
#+date:   [2023-05-15]
#+info: creation: [2023-05-15], using marks & literate style: [2024-11-15]
#+property: header-args:conf :tangle config

* preface
- [[https://i3wm.org/docs/userguide.html][i3 user-guide]]
- doing changes in system (eg. volume change / internet connection change) are displayed via notifications.  so we don't need the statusbar (only for leadermode indication) for a more focused workflow and more/clean screenspace.

* macros
- no statusbar => using notifications to display volume change
#+begin_src conf
set $ESC mode "default"
set $BIN ~/.config/bin
set $MV move container to workspace
set $SHCMD exec --no-startup-id
set $ROFI rofi -dmenu -no-custom -i -p find-file

set $VOL_INC pamixer --unmute --increase 5 && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $VOL_DEC pamixer --unmute --decrease 5 && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $VOL_MUTE pamixer --toggle-mute && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $MIC_MUTE pamixer --default-source --toggle-mute && dunstify --replace 69 "mic-mute: $(pamixer --default-source --get-mute)"

set $SYS_SLEEP i3lock --color ffffff && systemctl suspend
set $SYS_SCREENOFF sleep 1 && xset dpms force off
set $SCROT scrot --file "$HOME/Pictures/screenshots/%Y-%m-%d_T%H-%M.png" --exec 'dunstify "screenshot" "$f" && echo $f | xclip -selection=clipboard'
#+end_src

* autostart
start daemons (emacs, tmux), run startup commands, etc.
#+begin_src conf
exec_always --no-startup-id $BIN/autostart &
#+end_src

* opts
#+begin_src conf
workspace_auto_back_and_forth no
workspace_layout tabbed
force_focus_wrapping no
default_orientation horizontal
default_border pixel 2
hide_edge_borders smart
title_align left
font pango: Iosevka Comfy 10
focus_on_window_activation focus
for_window [all] focus, title_window_icon no
#+end_src

* keybindings
- mod1 = alt (ergonomic)
- disable mousewheel functionality :: no accidental window switching wheen mouse is still on titlebar
- accessibility :: we map XF86 keys for large keyboards & laptops, but most functions also available without taking the hands off the keyboards (or if minimalist keyboard without XFkeys)

#+begin_src conf
set $MOD Mod1
floating_modifier $MOD
bindsym button2 kill
bindsym --whole-window $MOD+button2 floating toggle
bindsym --whole-window $MOD+button1: drag floating window
bindsym --whole-window $MOD+button2: resize floating window
bindsym button4 nop
bindsym button5 nop

bindsym XF86MonBrightnessDown $SHCMD brightnessctl set 5%-
bindsym XF86MonBrightnessUp   $SHCMD brightnessctl set 5%+
bindsym XF86Display           $SHCMD xrandr --auto
bindsym XF86ScreenSaver       $SHCMD $SYS_SCREENOFF
bindsym XF86Sleep             $SHCMD $SYS_SLEEP
bindsym XF86AudioPlay         $SHCMD playerctl play-pause
bindsym XF86AudioPause        $SHCMD playerctl play-pause
bindsym XF86AudioNext         $SHCMD playerctl next
bindsym XF86AudioPrev         $SHCMD playerctl previous
bindsym XF86AudioLowerVolume  $SHCMD $VOL_DEC
bindsym XF86AudioRaiseVolume  $SHCMD $VOL_INC
bindsym XF86AudioMute         $SHCMD $VOL_MUTE
bindsym XF86AudioMicMute      $SHCMD $MIC_MUTE

bindsym $MOD+9            $SHCMD $MIC_MUTE
bindsym $MOD+0            $SHCMD $VOL_MUTE
bindsym $MOD+minus        $SHCMD $VOL_DEC
bindsym $MOD+equal        $SHCMD $VOL_INC
bindsym $MOD+bracketright $SHCMD playerctl next
bindsym $MOD+bracketleft  $SHCMD playerctl previous
bindsym $MOD+backslash    $SHCMD playerctl play-pause
#+end_src

* navigational bindings
- n/p consistent with cycling {rofi, shell, emacs} completion menus
- use MOD+shift+{n/p} to vsplit a window when needing to view things side-by-side.
- using [[https://github.com/Cretezy/i3-back][i3-back]] as daemon (in autostart)
#+begin_src conf
bindsym $MOD+p          focus left
bindsym $MOD+shift+p    move left
bindsym $MOD+n          focus right
bindsym $MOD+shift+n    move right
bindsym $MOD+q          kill
bindsym $MOD+b          $SHCMD rofi -show window
bindsym $MOD+semicolon  $SHCMD rofi -show drun
bindsym $MOD+Return     move workspace to output next
bindsym $MOD+Tab        [con_mark=_back] focus
bindsym $MOD+m          $SHCMD i3-input -l 1 -F 'mark %s'
bindsym $MOD+apostrophe $SHCMD i3-input -l 1 -F '[con_mark="%s"] focus'
#+end_src

* marks
- use mnemonic UPPER-CASE marks for our most used programs (use lowercase for temporary window marks if accessing a window often).
- the braces around the commands are required, otherwise undefined behaviour.
- get window title & class information using: ~xprop~
- DWIM try until succeed:
  1) jump to existing marked window
  2) switch to window of the class and mark it
  3) lauch the program according (client-server style if possible).

#+name: mark-classes
#+begin_src elisp
(defvar mark-classes '(("term" "t" "Alacritty" "alacritty --command tmux new-session -n term -A -s main")
                       ("editor" "e" "Emacs" "emacsclient --reuse-frame")
                       ("web" "w" "firefox" "firefox")
                       ("vid" "v" "mpv")
                       ("img" "i" "Nsxiv")))

(mapconcat (lambda (tuple)
             (let* ((name (nth 0 tuple))
                    (key (nth 1 tuple))
                    (class (nth 2 tuple))
                    (cmd (or (nth 3 tuple) nil))
                    (mark (upcase key)))
               (mapconcat #'identity
                          (list (concat "# " (upcase name))
                                (concat "for_window [class=\"" class "\"] mark " mark)
                                (concat "bindsym $MOD+" key
                                        " exec --no-startup-id i3-msg '[con_mark=" mark
                                        "] focus' || (i3-msg '[class=\"" class
                                        "\"] focus' && i3-msg 'mark " mark "')" (when cmd (concat " || " cmd))))
                          "\n")))
           mark-classes
           "\n\n")
#+end_src

(read: ~m-x info-display-manual org~ chapter: "16 working with source code", if you don't know what kind magic is going on there)
#+begin_src conf
<<mark-classes()>>
#+end_src

* leader
- bind infrequently used commands and menus.
#+begin_src conf
bindsym $MOD+space mode "leader"
mode "leader" {
        bindsym $MOD+r restart

        bindsym $MOD+a $SHCMD $BIN/audio-output-menu; $ESC
        bindsym $MOD+b $SHCMD $BIN/bluetooth-menu; $ESC
        bindsym $MOD+k $SHCMD $BIN/killprocess-menu; $ESC
        bindsym $MOD+d $SHCMD sh $HOME/.screenlayout/$(fd '.' --base-directory $HOME/.screenlayout | $ROFI); $ESC

        bindsym --release $MOD+s $SHCMD $SCROT --select; $ESC
        bindsym $MOD+shift+s $SHCMD $SCROT; $ESC

        bindsym $MOD+e $SHCMD emacsclient --eval "(emacs-everywhere)"; $ESC

        bindsym $MOD+m $SHCMD mpv "$(xclip -out)"; $ESC

        bindsym $MOD+q $SHCMD $SYS_SLEEP; $ESC
        bindsym $MOD+o $SHCMD $SYS_SCREENOFF; $ESC

        bindsym Escape mode "default"
}
#+end_src

* modus-operandi theme
#+begin_src conf
set $BG          #ffffff
set $FG          #000000
set $MODELINE_BG #c8c8c8
set $BORDER      #9f9f9f
set $ACTIVE_BG   #c0deff
set $URGENT_BG   #ff8f88

## element              $border    $bg          $fg $mark $border (child)
client.focused          $ACTIVE_BG $ACTIVE_BG   $FG $FG   $ACTIVE_BG
client.focused_inactive $BORDER    $MODELINE_BG $FG $FG   $BORDER
client.unfocused        $BORDER    $MODELINE_BG $FG $FG   $BORDER
client.urgent           $URGENT_BG $URGENT_BG   $FG $FG   $URGENT_BG
client.background       $BG
#+end_src

* modeline
- acts as the indicator as to when leader mode is active.
#+begin_src conf
bar {
        mode hide
        hidden_state hide
        workspace_buttons no
        binding_mode_indicator yes
        modifier none
        tray_output primary
        status_command i3status
        separator_symbol " | "

        colors {
                background $MODELINE_BG
                statusline $FG
                separator  $FG
                #class             $border      $bg          $fg
                binding_mode       $MODELINE_BG $MODELINE_BG $MODELINE_BG
                focused_workspace  $BORDER      $ACTIVE_BG   $FG
                active_workspace   $BORDER      $MODELINE_BG $FG
                inactive_workspace $BORDER      $MODELINE_BG $FG
                urgent_workspace   $BORDER      $URGENT_BG   $FG
        }
}
#+end_src
