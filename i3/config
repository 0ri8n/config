# ---
# author: emil lenz
# email:  emillenz@protonmail.com
# date:   2023-05-15
# info:
#   - manual: https://i3wm.org/docs/userguide.html
#   - doing changes in system (eg. volume change / internet connection change) are displayed via notifications.  so we don't need the statusbar (only for leadermode indication) for a more focused workflow and more/clean screenspace.
#   - get window title & class information using: `xprop`
# ---

# MACROS
set $ESC mode "default"
set $BIN ~/.config/bin
set $MV move container to workspace
set $SHCMD exec --no-startup-id
set $ROFI rofi -dmenu -no-custom -i -p find-file

# no statusbar => using notifications to display volume change
set $VOL_INC pamixer --unmute --increase 5 && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $VOL_DEC pamixer --unmute --decrease 5 && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $VOL_MUTE pamixer --toggle-mute && dunstify --replace 69 "vol: $(pamixer --get-volume-human)"
set $MIC_MUTE pamixer --default-source --toggle-mute && dunstify --replace 69 "mic-mute: $(pamixer --default-source --get-mute)"

set $SYS_SLEEP i3lock --color ffffff && systemctl suspend
set $SYS_SCREENOFF sleep 1 && xset dpms force off
set $SCROT scrot --file "$HOME/Pictures/screenshots/%Y-%m-%d_T%H-%M.png" --exec 'dunstify "screenshot" "$f" && echo $f | xclip -selection=clipboard'

# AUTOSTART :: start daemons (emacs, tmux), run startup commands, etc.
exec_always --no-startup-id $BIN/autostart &

# OPTS
workspace_auto_back_and_forth no
workspace_layout tabbed

# NO => allow focus change across splits (containers)
force_focus_wrapping no

default_orientation horizontal
default_border pixel 2
hide_edge_borders smart
title_align left
font pango: Iosevka Comfy 10
focus_on_window_activation focus
# no icons :: useless bloat, focus all windows upon opening
for_window [all] focus, title_window_icon no

# KEYBINDINGS
# mod1 = alt (ergonomic)
set $MOD Mod1
floating_modifier $MOD
bindsym button2 kill
bindsym --whole-window $MOD+button2 floating toggle
bindsym --whole-window $MOD+button1: drag floating window
bindsym --whole-window $MOD+button2: resize floating window
# disable mousewheel functionality :: no accidental window switching
bindsym button4 nop
bindsym button5 nop

# for compatibility
bindsym XF86MonBrightnessDown $SHCMD brightnessctl set 5%-
bindsym XF86MonBrightnessUp   $SHCMD brightnessctl set 5%+
bindsym XF86Display           $SHCMD xrandr --auto
bindsym XF86ScreenSaver       $SHCMD $SYS_SCREENOFF
bindsym XF86Sleep             $SHCMD $SYS_SLEEP
bindsym XF86AudioPlay         $SHCMD playerctl play-pause
bindsym XF86AudioPause        $SHCMD playerctl play-pause
bindsym XF86AudioNext         $SHCMD playerctl next
bindsym XF86AudioPrev         $SHCMD playerctl previous
bindsym XF86AudioLowerVolume  $SHCMD $VOL_DEC
bindsym XF86AudioRaiseVolume  $SHCMD $VOL_INC
bindsym XF86AudioMute         $SHCMD $VOL_MUTE
bindsym XF86AudioMicMute      $SHCMD $MIC_MUTE

# MEDIA BINDINGS
# keep hands on the keyborad => don't use (or have) XF86 keys
bindsym $MOD+9            $SHCMD $MIC_MUTE
bindsym $MOD+0            $SHCMD $VOL_MUTE
bindsym $MOD+minus        $SHCMD $VOL_DEC
bindsym $MOD+equal        $SHCMD $VOL_INC
bindsym $MOD+bracketright $SHCMD playerctl next
bindsym $MOD+bracketleft  $SHCMD playerctl previous
bindsym $MOD+backslash    $SHCMD playerctl play-pause

# NAVIGATIONAL BINDINGS
# - n/p consistent with cycling {rofi, shell, emacs} completion menus
# - use MOD+shift+{n/p} to vsplit a window when needing to view things side-by-side.
bindsym $MOD+p          focus left
bindsym $MOD+shift+p    move left
bindsym $MOD+n          focus right
bindsym $MOD+shift+n    move right
bindsym $MOD+q          kill
bindsym $MOD+b          $SHCMD rofi -show window
bindsym $MOD+semicolon  $SHCMD rofi -show drun
bindsym $MOD+Return     move workspace to output next
# using https://github. com/Cretezy/i3-back as daemon (in autostart)
bindsym $MOD+Tab        [con_mark=_back] focus

# MARKS
# - use mnemonic UPPER-CASE marks for our most used programs (use lowercase for temporary window marks if accessing a window often).
# - DWIM try until succeed:
# 1) jump to existing marked window
# 2) switch to window of the class and mark it
# 3) lauch the program according (client-server style if possible).
#
# note: the braces around the commands are required, otherwise undefined behaviour.
bindsym $MOD+m          $SHCMD i3-input -l 1 -F 'mark %s'
bindsym $MOD+apostrophe $SHCMD i3-input -l 1 -F '[con_mark="%s"] focus'

## TERMINAL
set $TERMINAL T
set $TERMINAL_CLASS Alacritty
for_window [class="$TERMINAL_CLASS"] mark $TERMINAL
bindsym $MOD+t $SHCMD \
        i3-msg '[con_mark=$TERMINAL] focus' \
        || (i3-msg '[class="$TERMINAL_CLASS"] focus' && i3-msg 'mark $TERMINAL') \
        || alacritty --command tmux new-session -n terminal -A -s main

## WEBBROWSER
set $WEB W
set $WEB_CLASS firefox
for_window [class="$WEB_CLASS"] mark $WEB
bindsym $MOD+w $SHCMD \
        i3-msg '[con_mark=$WEB] focus' \
        || i3-msg '[class="$WEB_CLASS"] focus' && i3-msg 'mark $WEB' \
        || firefox

## EDITOR
set $EDITOR E
set $EDITOR_CLASS Emacs
for_window [class="$EDITOR_CLASS"] mark E
bindsym $MOD+e $SHCMD i3-msg '[con_mark=$EDITOR] focus' \
        || (i3-msg '[class="$EDITOR_CLASS"] focus' && i3-msg 'mark $EDITOR') \
        || emacsclient --reuse-frame

## VIDEO
set $VIDEO M
set $VIDEO_CLASS mpv
for_window [class="$VIDEO_CLASS"] mark $VIDEO
bindsym $MOD+v $SHCMD \
        i3-msg '[con_mark=$VIDEO] focus' \
        || (i3-msg '[class="$VIDEO_CLASS"] focus' && i3-msg 'mark $VIDEO')

## IMAGES
set $IMG I
set $IMG_CLASS Nsxiv
for_window [class="$IMG_CLASS"] mark $IMG
bindsym $MOD+i $SHCMD \
        i3-msg '[con_mark=$IMG] focus' \
        || (i3-msg '[class="$IMG_CLASS"] focus' && i3-msg 'mark $IMG')

# LEADER
bindsym $MOD+space mode "leader"
mode "leader" {
        # mainly to call autostart to lauch killed processes.
        bindsym $MOD+r restart

        bindsym $MOD+a $SHCMD $BIN/audio-output-menu; $ESC
        bindsym $MOD+b $SHCMD $BIN/bluetooth-menu; $ESC
        bindsym $MOD+k $SHCMD $BIN/killprocess-menu; $ESC
        bindsym $MOD+d $SHCMD sh $HOME/.screenlayout/$(fd '.' --base-directory $HOME/.screenlayout | $ROFI); $ESC

        # NOTE :: after screenshot is taken, the path is written to clipboard (overheadfree)
        bindsym --release $MOD+s $SHCMD $SCROT --select; $ESC
        bindsym $MOD+shift+s $SHCMD $SCROT; $ESC

        bindsym $MOD+e $SHCMD emacsclient --eval "(emacs-everywhere)"; $ESC

        # copy browser link to clipboard and open it in mpv:
        bindsym $MOD+m $SHCMD mpv "$(xclip -out)"; $ESC

        bindsym $MOD+q $SHCMD $SYS_SLEEP; $ESC
        bindsym $MOD+o $SHCMD $SYS_SCREENOFF; $ESC

        bindsym Escape mode "default"
}

# MODUS-OPERANDI THEME
set $BG          #ffffff
set $FG          #000000
set $MODELINE_BG #c8c8c8
set $BORDER      #9f9f9f
set $ACTIVE_BG   #c0deff
set $URGENT_BG   #ff8f88

## element              $border    $bg          $fg $mark $border (child)
client.focused          $ACTIVE_BG $ACTIVE_BG   $FG $FG   $ACTIVE_BG
client.focused_inactive $BORDER    $MODELINE_BG $FG $FG   $BORDER
client.unfocused        $BORDER    $MODELINE_BG $FG $FG   $BORDER
client.urgent           $URGENT_BG $URGENT_BG   $FG $FG   $URGENT_BG
client.background       $BG

# MODELINE
bar {
        mode hide
        # only show if explicitly activated using leader mode
        hidden_state hide
        workspace_buttons no
        binding_mode_indicator yes
        modifier none
        tray_output primary
        status_command i3status
        separator_symbol " | "

        colors {
                background $MODELINE_BG
                statusline $FG
                separator  $FG
                #class             $border      $bg          $fg
                binding_mode       $MODELINE_BG $MODELINE_BG $MODELINE_BG
                focused_workspace  $BORDER      $ACTIVE_BG   $FG
                active_workspace   $BORDER      $MODELINE_BG $FG
                inactive_workspace $BORDER      $MODELINE_BG $FG
                urgent_workspace   $BORDER      $URGENT_BG   $FG
        }
}
